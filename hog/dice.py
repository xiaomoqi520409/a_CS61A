"""Functions that simulate dice rolls.

A dice function takes no arguments and returns a number from 1 to n
(inclusive), where n is the number of sides on the dice.

Fair dice produce each possible outcome with equal probability.
Two fair dice are already defined, four_sided and six_sided,
and are generated by the make_fair_dice function.

Test dice are deterministic: they always cycles through a fixed
sequence of values that are passed as arguments.
Test dice are generated by the make_test_dice function.

模拟掷骰子的函数。

掷骰子函数不接受任何参数，并返回一个从 1 到 n（包括 n）的数字，其中 n 是骰子的面数。

公平的骰子以相等的概率产生每个可能的结果。两个公平的骰子已经被定义，four_sided 和 six_sided，它们是由 make_fair_dice 函数生成的。

测试骰子是确定性的：它们总是循环遍历作为参数传递的固定值序列。测试骰子是由 make_test_dice 函数生成的。
"""

from random import randint

def make_fair_dice(sides):
    """Return a die that returns 1 to SIDES with equal chance.  返回一个骰子，它以相等的几率返回 1 到 SIDES。"""
    assert type(sides) == int and sides >= 1, 'Illegal value for sides  非法的边数值。'
    def dice():
        return randint(1,sides)
    return dice

four_sided = make_fair_dice(4)
six_sided = make_fair_dice(6)

def make_test_dice(*outcomes):
    """Return a die that cycles deterministically through OUTCOMES.
        返回一个骰子，它确定性地循环遍历 OUTCOMES。
    >>> dice = make_test_dice(1, 2, 3)
    >>> dice()
    1
    >>> dice()
    2
    >>> dice()
    3
    >>> dice()
    1
    >>> dice()
    2

    This function uses Python syntax/techniques not yet covered in this course.
    The best way to understand it is by reading the documentation and examples.
    此函数使用了本课程尚未涵盖的 Python 语法/技术。理解它的最佳方法是阅读文档和示例。
    """
    assert len(outcomes) > 0, 'You must supply outcomes to make_test_dice “你必须提供结果给 make_test_dice。”'
    for o in outcomes:
        assert type(o) == int and o >= 1, 'Outcome is not a positive integer 结果不是正整数。'
    index = len(outcomes) - 1
    def dice():
        nonlocal index
        index = (index + 1) % len(outcomes)
        return outcomes[index]
    return dice